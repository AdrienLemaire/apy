#compdef apy

_apy() {
  zstyle ":completion:*:*:apy:*" sort false

  local -a opts opts_help subcmds

  opts_help=( '(-h --help)'{-h,--help}'[Show help]' )

  opts=( \
    $opts_help
    '(-b --base)'{-b,--base}'[Set base directory]:Anki base directory:_files -/' \
    )

  subcmds=( \
    'add:Add notes interactively from terminal' \
    'add-from-file:Add notes from Markdown file For input file' \
    'check-media:Check media' \
    'edit-css:Edit CSS template for specified model' \
    'info:Print some basic statistics' \
    'list-notes:Print notes that match the given query' \
    'list-cards:Print cards that match the given query' \
    'review:Review marked notes (or notes that match' \
    'sync:Synchronize collection with AnkiWeb' \
    'tag:Add or remove tags from notes that match query' \
    )

  _arguments $opts '*:: :->subcmds' && return 0

  if (( CURRENT == 1 )); then
    _describe -t commands 'apy commands' subcmds
    return
  fi

  case "$words[1]" in
    add)
      opts=( \
        '(-t --tags)'{-t,--text}'[Specify tags]:tags:' \
        '(-m --model)'{-m,--model}'[Specify model]:model:' \
        '(-d --deck)'{-d,--deck}'[Specify deck]:deck:' \
        $opts_help \
        );;
    add-from-file)
      opts=( \
        '::Markdown input file:_files -g "*.md"' \
        '(-t --tags)'{-t,--text}'[Specify tags]:tags:' \
        $opts_help \
        );;
    edit-css)
      opts=( \
        '(-m --model)'{-m,--model}'[Specify model]:model:' \
        '(-s --sync-after)'{-s,--sync-after}'[Synchronize after edit]' \
        $opts_help \
        );;
    info)
      opts=( $opts_help );;
    list*)
      opts=( \
        '::Query' \
        '(-v --verbose)'{-v,--verbose}'[Be verbose]' \
        $opts_help \
        );;
    review)
      opts=( \
        '(-q --query)'{-q,--query}'[Query string]:query:' \
        $opts_help \
        );;
    tag)
      opts=( \
        '(-a --add-tags)'{-a,--add-tags}'[Add specified tags]:tags:' \
        '(-r --remove-tags)'{-r,--remove-tags}'[Remove specified tags]:tags:' \
        $opts_help \
        '::Query' \
        );;
    *)
      opts=( $opts_help );;
  esac

  _arguments $opts
}

_apy "$@"
